#MIN_CONFIG(3.2.0)

AM_INIT_AUTOMAKE(ktoshiba, 0.9, coproscefalo@gmail.com)
AC_C_BIGENDIAN
AC_CHECK_KDEMAXPATHLEN


dnl === dbus support check - begin ===
PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.33])

# get dbus system bus socket - begin ===
DBUS_SYSTEM_BUS_SOCKET="`pkg-config --variable=system_bus_default_address dbus-1`"
if test -z "$DBUS_SYSTEM_BUS_SOCKET"; then
    # use default
    DBUS_SYSTEM_BUS_SOCKET="unix:path=/var/run/dbus/system_bus_socket"
fi

AC_DEFINE_UNQUOTED(DBUS_SYSTEM_BUS_SOCKET, ["$DBUS_SYSTEM_BUS_SOCKET"],
    [D-BUS system bus socket path])

# check for dbus qt bindings --> copied from KNetworkmanager
#safe_CPPFLAGS=$CPPFLAGS
#CPPFLAGS="$CPPFLAGS $DBUS_CFLAGS $all_includes"
#AC_LANG_SAVE
#AC_LANG_CPLUSPLUS
#AC_CHECK_HEADER([dbus/connection.h], , [AC_MSG_ERROR([You need D-BUS/Qt3 bindings])])
#AC_CHECK_HEADER([dbus/message.h], , [AC_MSG_ERROR([You need D-BUS/Qt3 bindings])])
#CPPFLAGS=$safe_CPPFLAGS
#AC_LANG_RESTORE

AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)
dnl === dbus support check - end ===


dnl === powersave daemon support check - begin ===
AC_ARG_WITH(powersave,
    AS_HELP_STRING([--without-powersave], [build without powersave daemon support (default=yes)]),
    [ac_cv_use_powersave=$withval],
    [ac_cv_use_powersave=no]
)

if test "$ac_cv_use_powersave" = "yes"; then
    AC_CHECK_LIB(powersave_dbus, dbusSendSimpleMessage, [
        PKG_CHECK_MODULES(POWERSAVE, [powersave >= 0.12.2])
        PKG_CHECK_MODULES(POWERSAVE_DBUS, [powersave-dbus >= 0.12.2])
        have_powersave=true
    ], [have_powersave=false])

    if test "$have_powersave" = "true"; then
        AC_DEFINE(ENABLE_POWERSAVE, 1, [defined if you have powersave headers and libraries])
    else
        AC_MSG_WARN([You are missing the powersave headers and libraries. The powersave support won't be compiled])
    fi

    AC_SUBST(POWERSAVE_LIBS)
    AC_SUBST(POWERSAVE_DBUS_LIBS)
fi
dnl === powersave daemon support check - end ===


dnl === build ktosh_helper check - begin ===
compile_helper=no
AC_ARG_WITH(helper,
    AS_HELP_STRING([--without-helper], [build without ktosh_helper (default=no)]),
    [compile_helper=$withval],
    [compile_helper=yes]

    if test "$compile_helper" = "yes"; then
        AC_DEFINE(ENABLE_HELPER, 1, [defined if you have ktosh_helper enabled])
    fi
)

AM_CONDITIONAL(with_helper, [test x$compile_helper = xyes])
dnl === build ktosh_helper check - end ===


dnl === libsynaptics support check - begin ===
AC_ARG_WITH(libsynaptics,
    AS_HELP_STRING([--without-libsynaptics], [build without libsynaptics support (default=no)]),
    [ac_cv_use_synaptics=$withval],
    [ac_cv_use_synaptics=yes]
)

if test "$ac_cv_use_synaptics" = "yes"; then
    SYNAPTICS="-lsynaptics -lXext -lXtst"

    AC_DEFINE(ENABLE_SYNAPTICS, 1, [defined if you have libsynaptics support enabled])
    AC_SUBST(SYNAPTICS)
fi
dnl === libsynaptics support check - end ===


dnl === omnibook support check - begin ===
AC_ARG_WITH(omnibook,
    AS_HELP_STRING([--without-omnibook], [build without omnibook support (default=yes)]),
    [ac_cv_use_omnibook=$withval],
    [ac_cv_use_omnibook=no]
)

if test "$ac_cv_use_omnibook" = "yes"; then
    AC_DEFINE(ENABLE_OMNIBOOK, 1, [defined if you have omnibook support enabled])
fi

AM_CONDITIONAL(with_keyhandler, [test x$ac_cv_use_omnibook = xyes])
dnl === omnibook support check - end ===


AC_SUBST(XGETTEXT)
